package com.example.factorygeneral.greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.factorygeneral.greendao.bean.UnitListBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UNIT_LIST_BEAN".
*/
public class UnitListBeanDao extends AbstractDao<UnitListBean, Long> {

    public static final String TABLENAME = "UNIT_LIST_BEAN";

    /**
     * Properties of entity UnitListBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UId = new Property(0, Long.class, "uId", true, "_id");
        public final static Property Uuid = new Property(1, String.class, "uuid", false, "UUID");
        public final static Property Answer = new Property(2, String.class, "answer", false, "ANSWER");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property ContentFile = new Property(4, String.class, "contentFile", false, "CONTENT_FILE");
        public final static Property Id = new Property(5, String.class, "id", false, "ID");
        public final static Property KeyUuid = new Property(6, String.class, "keyUuid", false, "KEY_UUID");
        public final static Property Label = new Property(7, String.class, "label", false, "LABEL");
        public final static Property RelevantFile = new Property(8, String.class, "relevantFile", false, "RELEVANT_FILE");
        public final static Property Sx = new Property(9, String.class, "sx", false, "SX");
        public final static Property Text = new Property(10, String.class, "text", false, "TEXT");
        public final static Property Type = new Property(11, String.class, "type", false, "TYPE");
        public final static Property UserName = new Property(12, String.class, "userName", false, "USER_NAME");
    }


    public UnitListBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UnitListBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UNIT_LIST_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: uId
                "\"UUID\" TEXT," + // 1: uuid
                "\"ANSWER\" TEXT," + // 2: answer
                "\"CONTENT\" TEXT," + // 3: content
                "\"CONTENT_FILE\" TEXT," + // 4: contentFile
                "\"ID\" TEXT," + // 5: id
                "\"KEY_UUID\" TEXT," + // 6: keyUuid
                "\"LABEL\" TEXT," + // 7: label
                "\"RELEVANT_FILE\" TEXT," + // 8: relevantFile
                "\"SX\" TEXT," + // 9: sx
                "\"TEXT\" TEXT," + // 10: text
                "\"TYPE\" TEXT," + // 11: type
                "\"USER_NAME\" TEXT);"); // 12: userName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UNIT_LIST_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UnitListBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(3, answer);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String contentFile = entity.getContentFile();
        if (contentFile != null) {
            stmt.bindString(5, contentFile);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(6, id);
        }
 
        String keyUuid = entity.getKeyUuid();
        if (keyUuid != null) {
            stmt.bindString(7, keyUuid);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(8, label);
        }
 
        String relevantFile = entity.getRelevantFile();
        if (relevantFile != null) {
            stmt.bindString(9, relevantFile);
        }
 
        String sx = entity.getSx();
        if (sx != null) {
            stmt.bindString(10, sx);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(11, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(13, userName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UnitListBean entity) {
        stmt.clearBindings();
 
        Long uId = entity.getUId();
        if (uId != null) {
            stmt.bindLong(1, uId);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(2, uuid);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(3, answer);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(4, content);
        }
 
        String contentFile = entity.getContentFile();
        if (contentFile != null) {
            stmt.bindString(5, contentFile);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(6, id);
        }
 
        String keyUuid = entity.getKeyUuid();
        if (keyUuid != null) {
            stmt.bindString(7, keyUuid);
        }
 
        String label = entity.getLabel();
        if (label != null) {
            stmt.bindString(8, label);
        }
 
        String relevantFile = entity.getRelevantFile();
        if (relevantFile != null) {
            stmt.bindString(9, relevantFile);
        }
 
        String sx = entity.getSx();
        if (sx != null) {
            stmt.bindString(10, sx);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(11, text);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(12, type);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(13, userName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UnitListBean readEntity(Cursor cursor, int offset) {
        UnitListBean entity = new UnitListBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // uId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uuid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // answer
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // contentFile
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // keyUuid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // label
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // relevantFile
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sx
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // text
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // type
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // userName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UnitListBean entity, int offset) {
        entity.setUId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUuid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAnswer(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setContentFile(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKeyUuid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLabel(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRelevantFile(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSx(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setText(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setUserName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UnitListBean entity, long rowId) {
        entity.setUId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UnitListBean entity) {
        if(entity != null) {
            return entity.getUId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UnitListBean entity) {
        return entity.getUId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
